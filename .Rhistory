knitr::opts_chunk$set(echo = FALSE, cache=FALSE)
library(devtools)
library(rmarkdown)
sessionInfo()
library(shiny)
```
---
## Economic Order Quantity
The ShinyWebApp will produce the following outputs:
- EOQ- Economic Order Quantity
- Total Cost of Placing Orders
- Holding Cost (Inventory)
- Total Costs
The interactive inputs required are:
- Total Annual Deemand
- Per Order Cost
- Per item holding cost
---
## Code
# Chunk 3
library(shiny)
shinyServer(function(input, output) {
output$EOQ<- renderText({sqrt(2*input$annualDemand * input$ordringCost/input$holdingCost)})
output$no_Orders<- renderText({input$annualDemand/(sqrt(2*input$annualDemand * input$ordringCost/input$holdingCost))})
output$annual_OrderingCost<- renderText({input$annualDemand/(sqrt(2*input$annualDemand * input$ordringCost/input$holdingCost))*input$ordringCost})
output$holding_Cost<-renderText({((sqrt(2*input$annualDemand * input$ordringCost/input$holdingCost))/2)*input$holdingCost})
output$total_Cost<-renderText({((input$annualDemand/sqrt(2*input$annualDemand * input$ordringCost/input$holdingCost))*input$ordringCost) +
((sqrt(2*input$annualDemand * input$ordringCost/input$holdingCost))/2)*input$holdingCost})
})
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, cache=FALSE)
library(devtools)
library(rmarkdown)
sessionInfo()
library(shiny)
```
---
## Economic Order Quantity
The ShinyWebApp will produce the following outputs:
- EOQ- Economic Order Quantity
- Total Cost of Placing Orders
- Holding Cost (Inventory)
- Total Costs
The interactive inputs required are:
- Total Annual Deemand
- Per Order Cost
- Per item holding cost
---
## Code
# Chunk 2
shinyUI(fluidPage(
titlePanel("Economic Order Quantity"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("annualDemand",
"Entr the Annual Quantity required:", min = 0, max = 2400,value = 1),
sliderInput("ordringCost",
"Enter the Ordering Cost per order:", min = 0, max = 10,value = 1),
sliderInput("holdingCost",
"Enter the Holding Cost :", min = 0, max = 1,value = 0.1),
submitButton('Submit') ),
mainPanel(
h3("Economic Order Quantity is:"),
textOutput("EOQ"),
h3("No of orders per year:"),
textOutput("no_Orders"),
h3("Annual Ordering Cost :"),
textOutput("annual_OrderingCost"),
h3("Annual Holding Cost :"),
textOutput("holding_Cost"),
h3("Total Cost :"),
textOutput("total_Cost")
)
))
# Chunk 3
library(shiny)
shinyServer(function(input, output) {
output$EOQ<- renderText({sqrt(2*input$annualDemand * input$ordringCost/input$holdingCost)})
output$no_Orders<- renderText({input$annualDemand/(sqrt(2*input$annualDemand * input$ordringCost/input$holdingCost))})
output$annual_OrderingCost<- renderText({input$annualDemand/(sqrt(2*input$annualDemand * input$ordringCost/input$holdingCost))*input$ordringCost})
output$holding_Cost<-renderText({((sqrt(2*input$annualDemand * input$ordringCost/input$holdingCost))/2)*input$holdingCost})
output$total_Cost<-renderText({((input$annualDemand/sqrt(2*input$annualDemand * input$ordringCost/input$holdingCost))*input$ordringCost) +
((sqrt(2*input$annualDemand * input$ordringCost/input$holdingCost))/2)*input$holdingCost})
})
knitr::opts_chunk$set(echo = FALSE, cache=FALSE)
library(devtools)
library(rmarkdown)
sessionInfo()
library(shiny)
```
---
## Economic Order Quantity
The ShinyWebApp will produce the following outputs:
- EOQ- Economic Order Quantity
- Total Cost of Placing Orders
- Holding Cost (Inventory)
- Total Costs
The interactive inputs required are:
- Total Annual Deemand
- Per Order Cost
- Per item holding cost
---
## Code
knitr::opts_chunk$set(echo = FALSE, cache=FALSE)
library(devtools)
library(rmarkdown)
sessionInfo()
library(shiny)
```
---
## Economic Order Quantity
The ShinyWebApp will produce the following outputs:
- EOQ- Economic Order Quantity
- Total Cost of Placing Orders
- Holding Cost (Inventory)
- Total Costs
The interactive inputs required are:
- Total Annual Deemand
- Per Order Cost
- Per item holding cost
---
## Code
knitr::opts_chunk$set(echo = FALSE, cache=FALSE)
library(devtools)
library(rmarkdown)
sessionInfo()
library(shiny)
```
---
## Economic Order Quantity
The ShinyWebApp will produce the following outputs:
- EOQ- Economic Order Quantity
- Total Cost of Placing Orders
- Holding Cost (Inventory)
- Total Costs
The interactive inputs required are:
- Total Annual Deemand
- Per Order Cost
- Per item holding cost
---
## Code
knitr::opts_chunk$set(echo = FALSE, cache=FALSE)
library(devtools)
library(rmarkdown)
sessionInfo()
library(shiny)
```
---
## Economic Order Quantity
The ShinyWebApp will produce the following outputs:
- EOQ- Economic Order Quantity
- Total Cost of Placing Orders
- Holding Cost (Inventory)
- Total Costs
The interactive inputs required are:
- Total Annual Deemand
- Per Order Cost
- Per item holding cost
---
## Code
g
install.packages("ggplot2")
library(ggplot2)
```{r galton, fig.height=6,fig.width=12, fig.align='center', echo = FALSE, message =FALSE, warning=FALSE}
library(ggplot2)
```{r galton, fig.height=6,fig.width=12, fig.align='center', echo = FALSE, message =FALSE, warning=FALSE}
library(UsingR); data(galton); library(ggplot2)
library(reshape2)
longGalton <- melt(galton, measure.vars = c("child", "parent"))
g <- ggplot(longGalton, aes(x = value)) + geom_histogram(aes(y = ..density..,  fill = variable), binwidth=1, colour = "black") + geom_density(size = 2)
g <- g + facet_grid(. ~ variable)
g
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
```
```{r lsm, dependson="galton",fig.height=7,fig.width=7, fig.align='center', echo = FALSE}
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mean(galton$child), size = 2)
g
```
```{r, fig.align='center',fig.height=5, fig.width=10, echo = FALSE, warning=FALSE, error=FALSE, message=FALSE}
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.25, colour = "black")
g + facet_grid(. ~ size)
```
data sleep
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
cars <- system.file("texts", "cars.csv", package = "tm")
Corpus(CSVSource(cars))
library("tm")
Corpus(CSVSource(cars))
? CSVSource
?? CSVSource
class{CSVSource}
class{CSVSource},
\class{CSVSource},
cars
cars <- system.file("texts", "cars.csv", package = "tm")
Corpus(CSVSource(cars))
<<echo=FALSE>>=
options(width = 75)
### for sampling
set.seed <- 1234
<<keep.source=TRUE>>=
txt <- system.file("texts", "txt", package = "tm")
(ovid <- Corpus(DirSource(txt),
readerControl = list(reader = readPlain,
language = "la",
load = TRUE)))
options(width = 75)
### for sampling
set.seed <- 1234
# Comma separated values
cars <- system.file("texts", "cars.csv", package = "tm")
Corpus(CSVSource(cars))
@
options(width = 75)
### for sampling
set.seed <- 1234
# Comma separated values
cars <- system.file("texts", "cars.csv", package = "tm")
Corpus(CSVSource(cars))
reut21578 <- system.file("texts", "reut21578", package = "tm")
reut21578XML <- system.file("texts", "reut21578.xml", package = "tm")
reut21578XMLgz <- system.file("texts", "reut21578.xml.gz", package = "tm")
(reut21578TDC <- Corpus(DirSource(reut21578),
readerControl = list(reader = readReut21578XML,
language = "en_US",
load = FALSE)))
Corpus(ReutersSource(reut21578XML),
readerControl = list(reader = readReut21578XML,
language = "en_US", load = FALSE))
Corpus(ReutersSource(gzfile(reut21578XMLgz)),
readerControl = list(reader = readReut21578XML,
language = "en_US", load = FALSE))
rcv1 <- system.file("texts", "rcv1", package = "tm")
rcv1XML <- system.file("texts", "rcv1.xml", package = "tm")
Corpus(DirSource(rcv1),
readerControl = list(reader = readRCV1, language = "en_US", load = TRUE))
Corpus(ReutersSource(rcv1XML),
readerControl = list(reader = readRCV1, language = "en_US", load = FALSE))
newsgroup <- system.file("texts", "newsgroup", package = "tm")
Corpus(DirSource(newsgroup),
readerControl = list(reader = readNewsgroup, language = "en_US", load = TRUE))
show(ovid)
summary(ovid)
inspect(ovid[1:2])
shiny::runApp('C:/Users/Prahlad/Desktop/WEEK-5-MILESTONE')
runApp()
setwd("C:/Users/Prahlad/Desktop/WEEK-5-MILESTONE")
runApp()
install.packages("rsconnect")
runApp()
getwd()
if (identical(character(0),head(bigram[bigram$unigram == clean_001[1], 2],1))) {messag<<-"Sorry No match - Try again - the  word 'the' is returned."; head("the",1)}
runApp()
rsconnect::setAccountInfo(name='prahladpunia', token='3689E283951990CDB90B190B4211D025', secret='n1VwayKJTpxiGGj/qlHnEtPP5Rhno8KQaXR1kY7H')
options(java.parameters = "-Xmx1024m")
library(RJDBC)
library(stringi)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
library(htmlTable)
library(xtable)
library(knitr)
library(dplyr)
library(tm)
library(NLP)
library(ngram)
library(RWeka)
library(slam)
library(data.table)
library(rJava)
library(ggplot2)
library(R.utils)
library(dplyr)
library(parallel)
con1 <- file("./final/en_US/en_US.twitter.txt", open = "rb")
twitter <- readLines(con1, skipNul = TRUE, encoding="UTF-8")
close(con1)
con2 <- file("./final/en_US/en_US.news.txt", open = "rb")
news <- readLines(con2, skipNul = TRUE, encoding="UTF-8")
close(con2)
con3 <- file("./final/en_US/en_US.blogs.txt", open = "rb")
blogs <- readLines(con3, skipNul = TRUE, encoding="UTF-8")
close(con3)
list.files("./final")
samplingText <- function(text_BNT, partof) {
sampling <- sample(1:length(text_BNT), length(text_BNT)*partof)
SampleText <- text_BNT[sampling]
SampleText
}
set.seed(20200623)
partof <- 1/100
sample_Blog<- samplingText(blogs, partof)
sample_Twitter <- samplingText(twitter, partof)
sample_News <- samplingText(news, partof)
sample_002 <- c(sample_Blog, sample_News, sample_Twitter)
writeLines(sample_002, "./samples_BNT/sample_002.txt")
stri_stats_general(sample_002) #Statistics of sample text
summary( nchar(sample_002))
Space_r <- content_transformer(function(x, pattern) gsub(pattern, " ", x))# Function for removing unwanted
clean_BNT <- function (clean_Text) {
clean_Text <- tm_map(clean_Text, Space_r, "(f|ht)tp(s?)://(.*)[.][a-z]+") # Remove spaces
clean_Text <- tm_map(clean_Text, Space_r, "@[^\\s]+")
clean_Text <- tm_map(clean_Text, content_transformer(tolower))
clean_Text <- tm_map(clean_Text, stripWhitespace)
clean_Text <- tm_map(clean_Text, removePunctuation)
clean_Text <- tm_map(clean_Text, removeNumbers)
clean_Text <- tm_map(clean_Text, PlainTextDocument)
clean_Text
}
sample_002 <- VCorpus(DirSource("./samples_BNT", encoding = "UTF-8"))
sample_002 <- clean_BNT(sample_002)
tdm_Ngram <- function (clean_Text, n) {
NgramTokenizer <- function(x) {RWeka::NGramTokenizer(x, RWeka::Weka_control(min = n, max = n))}
tdm_ngram <- TermDocumentMatrix(clean_Text, control = list(tokenizer = NgramTokenizer))
tdm_ngram
}
ngram_sorted_df <- function (tdm_ngram) {
tdm_ngram_matrix <- as.matrix(tdm_ngram)
tdm_ngram_df <- as.data.frame(tdm_ngram_matrix)
colnames(tdm_ngram_df) <- "Count"
tdm_ngram_df <- tdm_ngram_df[order(-tdm_ngram_df$Count), , drop = FALSE]
tdm_ngram_df
}
tdm_uni_gram <- tdm_Ngram(sample_002, 1)
tdm_bi_gram <- tdm_Ngram(sample_002, 2)
tdm_tri_gram <- tdm_Ngram(sample_002, 3)
tdm_quad_gram <- tdm_Ngram(sample_002, 4)
tdm_quant_gram <- tdm_Ngram(sample_002,5)
tdm_uni_gram_df <- ngram_sorted_df(tdm_uni_gram)
tdm_bi_gram_df <- ngram_sorted_df(tdm_bi_gram)
tdm_tri_gram_df <- ngram_sorted_df(tdm_tri_gram)
tdm_quad_gram_df <- ngram_sorted_df(tdm_quad_gram)
tdm_quant_gram_df <- ngram_sorted_df(tdm_quant_gram)
quantgram <- data.frame(rows=rownames(tdm_quant_gram_df),count=tdm_quant_gram_df$Count)
quantgram$rows <- as.character(quantgram$rows)
quantgram_split <- strsplit(as.character(quantgram$rows),split=" ")
quantgram <- transform(quantgram,first = sapply(quantgram_split,"[[",1),second = sapply(quantgram_split,"[[",2),third = sapply(quantgram_split,"[[",3), fourth = sapply(quantgram_split,"[[",4))
quantgram <- data.frame(unigram = quantgram$first,bigram = quantgram$second, trigram = quantgram$third, quadgram = quantgram$fourth, freq = quantgram$count,stringsAsFactors=FALSE)
write.csv(quantgram[quantgram$freq > 1,],"./ShinyApp/quantgram.csv",row.names=F)
quantgram <- read.csv("./ShinyApp/quantgram.csv",stringsAsFactors = F)
saveRDS(quantgram,"./ShinyApp/quantgram.RData")
quadgram <- data.frame(rows=rownames(tdm_quad_gram_df),count=tdm_quad_gram_df$Count)
quadgram$rows <- as.character(quadgram$rows)
quadgram_split <- strsplit(as.character(quadgram$rows),split=" ")
quadgram <- transform(quadgram,first = sapply(quadgram_split,"[[",1),second = sapply(quadgram_split,"[[",2),third = sapply(quadgram_split,"[[",3), fourth = sapply(quadgram_split,"[[",4))
quadgram <- data.frame(unigram = quadgram$first,bigram = quadgram$second, trigram = quadgram$third, quadgram = quadgram$fourth, freq = quadgram$count,stringsAsFactors=FALSE)
write.csv(quadgram[quadgram$freq > 1,],"./ShinyApp/quadgram.csv",row.names=F)
quadgram <- read.csv("./ShinyApp/quadgram.csv",stringsAsFactors = F)
saveRDS(quadgram,"./ShinyApp/quadgram.RData")
trigram <- data.frame(rows=rownames(tdm_tri_gram_df),count=tdm_tri_gram_df$Count)
trigram$rows <- as.character(trigram$rows)
trigram_split <- strsplit(as.character(trigram$rows),split=" ")
trigram <- transform(trigram,first = sapply(trigram_split,"[[",1),second = sapply(trigram_split,"[[",2),third = sapply(trigram_split,"[[",3))
trigram <- data.frame(unigram = trigram$first,bigram = trigram$second, trigram = trigram$third, freq = trigram$count,stringsAsFactors=FALSE)
write.csv(trigram[trigram$freq > 1,],"./ShinyApp/trigram.csv",row.names=F)
trigram <- read.csv("./ShinyApp/trigram.csv",stringsAsFactors = F)
saveRDS(trigram,"./ShinyApp/trigram.RData")
bigram <- data.frame(rows=rownames(tdm_bi_gram_df),count=tdm_bi_gram_df$Count)
bigram$rows <- as.character(bigram$rows)
bigram_split <- strsplit(as.character(bigram$rows),split=" ")
bigram <- transform(bigram,first = sapply(bigram_split,"[[",1),second = sapply(bigram_split,"[[",2))
bigram <- data.frame(unigram = bigram$first,bigram = bigram$second,freq = bigram$count,stringsAsFactors=FALSE)
write.csv(bigram[bigram$freq > 1,],"./ShinyApp/bigram.csv",row.names=F)
bigram <- read.csv("./ShinyApp/bigram.csv",stringsAsFactors = F)
saveRDS(bigram,"./ShinyApp/bigram.RData")
options(java.parameters = "-Xmx1024m")
library(RJDBC)
library(stringi)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
library(htmlTable)
library(xtable)
library(knitr)
library(dplyr)
library(tm)
library(NLP)
library(ngram)
library(RWeka)
library(slam)
library(data.table)
library(rJava)
library(ggplot2)
library(R.utils)
library(dplyr)
library(parallel)
con1 <- file("./final/en_US/en_US.twitter.txt", open = "rb")
twitter <- readLines(con1, skipNul = TRUE, encoding="UTF-8")
close(con1)
con2 <- file("./final/en_US/en_US.news.txt", open = "rb")
news <- readLines(con2, skipNul = TRUE, encoding="UTF-8")
close(con2)
con3 <- file("./final/en_US/en_US.blogs.txt", open = "rb")
blogs <- readLines(con3, skipNul = TRUE, encoding="UTF-8")
close(con3)
list.files("./final")
samplingText <- function(text_BNT, partof) {
sampling <- sample(1:length(text_BNT), length(text_BNT)*partof)
SampleText <- text_BNT[sampling]
SampleText
}
set.seed(20200623)
partof <- 1/100
sample_Blog<- samplingText(blogs, partof)
sample_Twitter <- samplingText(twitter, partof)
sample_News <- samplingText(news, partof)
sample_002 <- c(sample_Blog, sample_News, sample_Twitter)
writeLines(sample_002, "./samples_BNT/sample_002.txt")
stri_stats_general(sample_002) #Statistics of sample text
summary( nchar(sample_002))
Space_r <- content_transformer(function(x, pattern) gsub(pattern, " ", x))# Function for removing unwanted
clean_BNT <- function (clean_Text) {
clean_Text <- tm_map(clean_Text, Space_r, "(f|ht)tp(s?)://(.*)[.][a-z]+") # Remove spaces
clean_Text <- tm_map(clean_Text, Space_r, "@[^\\s]+")
clean_Text <- tm_map(clean_Text, content_transformer(tolower))
clean_Text <- tm_map(clean_Text, stripWhitespace)
clean_Text <- tm_map(clean_Text, removePunctuation)
clean_Text <- tm_map(clean_Text, removeNumbers)
clean_Text <- tm_map(clean_Text, PlainTextDocument)
clean_Text
}
sample_002 <- VCorpus(DirSource("./samples_BNT", encoding = "UTF-8"))
sample_002 <- clean_BNT(sample_002)
tdm_Ngram <- function (clean_Text, n) {
NgramTokenizer <- function(x) {RWeka::NGramTokenizer(x, RWeka::Weka_control(min = n, max = n))}
tdm_ngram <- TermDocumentMatrix(clean_Text, control = list(tokenizer = NgramTokenizer))
tdm_ngram
}
ngram_sorted_df <- function (tdm_ngram) {
tdm_ngram_matrix <- as.matrix(tdm_ngram)
tdm_ngram_df <- as.data.frame(tdm_ngram_matrix)
colnames(tdm_ngram_df) <- "Count"
tdm_ngram_df <- tdm_ngram_df[order(-tdm_ngram_df$Count), , drop = FALSE]
tdm_ngram_df
}
tdm_uni_gram <- tdm_Ngram(sample_002, 1)
tdm_bi_gram <- tdm_Ngram(sample_002, 2)
tdm_tri_gram <- tdm_Ngram(sample_002, 3)
tdm_quad_gram <- tdm_Ngram(sample_002, 4)
tdm_quant_gram <- tdm_Ngram(sample_002,5)
tdm_uni_gram_df <- ngram_sorted_df(tdm_uni_gram)
tdm_bi_gram_df <- ngram_sorted_df(tdm_bi_gram)
tdm_tri_gram_df <- ngram_sorted_df(tdm_tri_gram)
tdm_quad_gram_df <- ngram_sorted_df(tdm_quad_gram)
tdm_quant_gram_df <- ngram_sorted_df(tdm_quant_gram)
quantgram <- data.frame(rows=rownames(tdm_quant_gram_df),count=tdm_quant_gram_df$Count)
quantgram$rows <- as.character(quantgram$rows)
quantgram_split <- strsplit(as.character(quantgram$rows),split=" ")
quantgram <- transform(quantgram,first = sapply(quantgram_split,"[[",1),second = sapply(quantgram_split,"[[",2),third = sapply(quantgram_split,"[[",3), fourth = sapply(quantgram_split,"[[",4))
quantgram <- data.frame(unigram = quantgram$first,bigram = quantgram$second, trigram = quantgram$third, quadgram = quantgram$fourth, freq = quantgram$count,stringsAsFactors=FALSE)
write.csv(quantgram[quantgram$freq > 1,],"./ShinyApp/quantgram.csv",row.names=F)
quantgram <- read.csv("./ShinyApp/quantgram.csv",stringsAsFactors = F)
saveRDS(quantgram,"./ShinyApp/quantgram.RData")
quadgram <- data.frame(rows=rownames(tdm_quad_gram_df),count=tdm_quad_gram_df$Count)
quadgram$rows <- as.character(quadgram$rows)
quadgram_split <- strsplit(as.character(quadgram$rows),split=" ")
quadgram <- transform(quadgram,first = sapply(quadgram_split,"[[",1),second = sapply(quadgram_split,"[[",2),third = sapply(quadgram_split,"[[",3), fourth = sapply(quadgram_split,"[[",4))
quadgram <- data.frame(unigram = quadgram$first,bigram = quadgram$second, trigram = quadgram$third, quadgram = quadgram$fourth, freq = quadgram$count,stringsAsFactors=FALSE)
write.csv(quadgram[quadgram$freq > 1,],"./ShinyApp/quadgram.csv",row.names=F)
quadgram <- read.csv("./ShinyApp/quadgram.csv",stringsAsFactors = F)
saveRDS(quadgram,"./ShinyApp/quadgram.RData")
trigram <- data.frame(rows=rownames(tdm_tri_gram_df),count=tdm_tri_gram_df$Count)
trigram$rows <- as.character(trigram$rows)
trigram_split <- strsplit(as.character(trigram$rows),split=" ")
trigram <- transform(trigram,first = sapply(trigram_split,"[[",1),second = sapply(trigram_split,"[[",2),third = sapply(trigram_split,"[[",3))
trigram <- data.frame(unigram = trigram$first,bigram = trigram$second, trigram = trigram$third, freq = trigram$count,stringsAsFactors=FALSE)
write.csv(trigram[trigram$freq > 1,],"./ShinyApp/trigram.csv",row.names=F)
trigram <- read.csv("./ShinyApp/trigram.csv",stringsAsFactors = F)
saveRDS(trigram,"./ShinyApp/trigram.RData")
bigram <- data.frame(rows=rownames(tdm_bi_gram_df),count=tdm_bi_gram_df$Count)
bigram$rows <- as.character(bigram$rows)
bigram_split <- strsplit(as.character(bigram$rows),split=" ")
bigram <- transform(bigram,first = sapply(bigram_split,"[[",1),second = sapply(bigram_split,"[[",2))
bigram <- data.frame(unigram = bigram$first,bigram = bigram$second,freq = bigram$count,stringsAsFactors=FALSE)
write.csv(bigram[bigram$freq > 1,],"./ShinyApp/bigram.csv",row.names=F)
bigram <- read.csv("./ShinyApp/bigram.csv",stringsAsFactors = F)
saveRDS(bigram,"./ShinyApp/bigram.RData")
runApp()
rsconnect::setAccountInfo(name='prahladpunia', token='3689E283951990CDB90B190B4211D025', secret='n1VwayKJTpxiGGj/qlHnEtPP5Rhno8KQaXR1kY7H')
runApp()
